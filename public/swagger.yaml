swagger: '2.0'
info:
  title: Canvas LMS Class Visualizations API
  description: An API that wraps around the Canvas LMS API
  version: "1.0.0"
# the domain of the service
host: canvas-viz-api.herokuapp.com
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
# basePath:
# produces:
#   - text/html
paths:
  /api/v1/:
    get:
      summary: Home page
      tags:
        - Home
      responses:
        200:
          description: API is up and running
          schema:
            type: string
  /api/v1/client_id:
    get:
      summary: Get URL to initiate Google OAuth
      description: |
        The APP needs the API's Google Client ID to initiate Google OAuth. The
        API creates the URL that needs to be called and returns it.
      tags:
        - Login
      responses:
        200:
          description: |
            The API returns the URL the APP can call to initiate Google OAuth
            sequence.
          schema:
            type: string
  /api/v1/use_callback_code:
    get:
      summary: Returns user identification data
      description: |
        The APP needs a temporary token to use to communicate with the API. The
        API uses the Google user's email address to create this token. However,
        the API does not trust the APP. So after retrieving an email address
        from Google, the API returns an unencrypted email address the APP can
        use to identify the user, and a time-limited JWT containing the
        encrypted email address the APP can use as a bearer token to communicate
        with the API. This bearer token is how the API identifies the user until
        another bearer token is returned to the APP.
      parameters:
        - name: code
          in: query
          description: |
            This is the `code` you get back from Google as part of the OAuth
            process. We will use this to get the user's credentials from Google.
          required: true
          type: string
      tags:
        - Login
      responses:
        200:
          description: A JSON object containing two key-value pairs
          schema:
            $ref: '#/definitions/Email'
  /api/v1/save_password:
    post:
      summary: |
        Saves user password and returns bearer token. This can be used for a new
        user or a returning user who has forgotten their password.
      security:
        - Bearer: []
      parameters:
        - name: password
          in: query
          description: User's password
          required: true
          type: string
      tags:
        - Login
      responses:
        200:
          description: |
            A JWT valid for 3 hours. Use it as the bearer token for subsequent
            API calls.
          schema:
            $ref: '#/definitions/RegularToken'
        400:
          description: Wrong token format
          schema:
            type: string
            format: string
        401:
          description: |
            Body will be more specific, error stems from a problem with
            decrypting the bearer token, most likely due to expiration of token.
          schema:
            type: string
            format: string
  /api/v1/verify_password:
    get:
      summary: To verify the user's password for a returning user.
      security:
        - Bearer: []
      parameters:
        - name: password
          in: query
          description: User's password
          required: true
          type: string
      tags:
        - Login
      responses:
        200:
          description: |
            A JWT valid for 3 hours. Use it as the bearer token for subsequent
            API calls.
          schema:
            $ref: '#/definitions/RegularToken'
        400:
          description: Wrong token format
          schema:
            type: string
            format: string
        401:
          description: |
            Body will be more specific, error stems from a problem with
            decrypting the bearer token, most likely due to expiration of token.
          schema:
            type: string
            format: string
  /api/v1/tokens:
    post:
      summary: Save a canvas token for a user
      security:
        - Bearer: []
      parameters:
        - name: url
          in: query
          description: Canvas URL the user wants to access
          required: true
          type: string
        - name: token
          in: query
          description: Canvas token the user got from Canvas
          required: true
          type: string
      tags:
        - Tokens
      responses:
        200:
          description: |
            A message either reporting whether canvas token was saved or not
          schema:
            type: string
            format: string
        400:
          description: Wrong token format
          schema:
            type: string
            format: string
        401:
          description: |
            Body will be more specific, error stems from a problem with
            decrypting the bearer token, most likely due to expiration of token.
          schema:
            type: string
            format: string
    get:
      summary: Returns list of saved tokens saved by user as JSON array
      security:
        - Bearer: []
      tags:
        - Tokens
      responses:
        200:
          description: A JSON array of all Canvas tokens saved by the user
          schema:
            type: array
            items:
              $ref: '#/definitions/Tokens'
        400:
          description: Wrong token format
          schema:
            type: string
            format: string
        401:
          description: |
            Body will be more specific, error stems from a problem with
            decrypting the bearer token, most likely due to expiration of token.
          schema:
            type: string
            format: string
    delete:
      summary: Delete all canvas token for a user
      security:
        - Bearer: []
      tags:
        - Tokens
      responses:
        200:
          description: Token deleted
          schema:
            type: integer
            format: int32
        400:
          description: Wrong token format
          schema:
            type: string
            format: string
        401:
          description: |
            Body will be more specific, error stems from a problem with
            decrypting the bearer token, most likely due to expiration of token.
          schema:
            type: string
            format: string
        403:
          description: The user does not own this token.
          schema:
            type: integer
            format: int32
  /api/v1/token:
    delete:
      summary: Delete a specific canvas token for a user
      security:
        - Bearer: []
      parameters:
        - name: access_key
          in: query
          description: |
            `access_token` of canvas token received from `get` call to
            `/api/v1/tokens` route
          required: true
          type: string
      tags:
        - Tokens
      responses:
        200:
          description: Token deleted
          schema:
            type: integer
            format: int32
        400:
          description: Wrong token format
          schema:
            type: string
            format: string
        401:
          description: |
            Body will be more specific, error stems from a problem with
            decrypting the bearer token, most likely due to expiration of token.
          schema:
            type: string
            format: string
        403:
          description: The user does not own this token.
          schema:
            type: integer
            format: int32
  /api/v1/courses:
    get:
      summary: Get course list for a given token
      security:
        - Bearer: []
      parameters:
        - name: access_key
          in: query
          description: |
            `access_token` of canvas token received from `get` call to
            `/api/v1/tokens` route
          required: true
          type: string
      tags:
        - Canvas
      responses:
        200:
          description: |
            A JSON array of all Canvas courses linked to the user's canvas token
          schema:
            type: array
            items:
              $ref: '#/definitions/Courses'
        400:
          description: |
            Check the error message. If there is no error message - which is a
            possibility - then something very strange has happened.
          schema:
            type: string
            format: string
        401:
          description: |
            Body will be more specific, error stems from a problem with
            decrypting the bearer token, most likely due to expiration of token.
          schema:
            type: string
            format: string
        403:
          description: The user does not own this token.
          schema:
            type: integer
            format: int32
  /api/v1/courses/{course_id}/{data}:
    get:
      summary: Get specific course data from API
      security:
        - Bearer: []
      description: |
        This route return data that can be used to create visualizations.
        Everything else was building up to this!
      parameters:
        - name: course_id
          in: path
          description: |
            `course_id` for the course can be found in the `id` key of the JSON
            objects returned in the `/api/v1/courses` route
          required: true
          type: string
        - name: data
          in: path
          description: |
            `data` has to be one of the following: `activity` - Course Level
            Participation & Views, `users` - User Level Participation & Views,
            `assignments` - Course Level Assignment data, `quizzes` - Quiz data,
            `discussion_topics` - List of discussions from users,
            `student_summaries` - Summary of student page views, discussions,
            and assignment submission lateness, and `enrollments` - List of
            enrolled students.
          required: true
          type: string
        - name: access_key
          in: query
          description: |
            `access_token` of canvas token received from `get` call to
            `/api/v1/tokens` route
          required: true
          type: string
      tags:
        - Canvas
      responses:
        200:
          description: |
            This is entirely dependent on the `data` path. It could be an array,
            or a hash.
        400:
          description: |
            Check the error message. If there is no error message - which is a
            possibility - then it is likely that the `data` in the path is not
            one of the required options.
          schema:
            type: string
            format: string
        401:
          description: |
            Body will be more specific, error stems from a problem with
            decrypting the bearer token, most likely due to expiration of token.
          schema:
            type: string
            format: string
        403:
          description: The user does not own this token.
          schema:
            type: integer
            format: int32
definitions:
  Courses:
    type: object
    properties:
      id:
        type: number
        description: |
          A unique identifier for the Canvas course. Return this value to the
          API for subsequent course-related requests.
      other_values:
        description: |
          Other values the Canvas API provides including: name, account_id, ...
  Tokens:
    type: object
    properties:
      obfuscated_canvas_token:
        type: string
        description: |
          Token from canvas but obfuscated such that it can safely be displayed
      canvas_url:
        type: string
        description: The URL the saved Canvas token can access
      access_key:
        type: string
        description: |
          A pseudo-unique identifier of tokens you must return when you want
          query the Canvas API
  Email:
    type: object
    properties:
      encrypted_email:
        $ref: '#/definitions/EmailToken'
      email:
        type: string
        format: email
        description: An email address the APP can use to identify the user
  EmailToken:
    type: string
    format: Base64
    description: |
      A JWT that needs to be submitted for some calls to the API. It expires
      after 3 hours. Retrieved from the `/api/v1/use_callback_code` route.
  RegularToken:
    type: string
    format: Base64
    description: |
      A JWT that needs to be submitted for calls that go to the Canvas API, or
      calls related to token handling. It expires after 3 hours. Retrieved from
      either the `/api/v1/verify_password` or `/api/v1/save_password` route.
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: Use the Bearer authentication scheme
    x-pattern: Bearer {apiToken}
